QEMU

This document mainly describes using QEMU based on Andrew Baumann's fork for the
Raspberry Pi 2 (32-bit), which has been patched in my own fork:

	https://github.com/rsta2/qemu

Current official QEMU releases (e.g. 4.2.0) can be used for emulating the
Raspberry Pi 3 in AArch64 mode with Circle programs. Unfortunately USB and
networking are not supported in this case. QEMU 4.2.0 will be started with:

	qemu-system-aarch64 -M raspi3 -kernel kernel8.img


A number of Circle samples can run inside the QEMU processor emulator. This
includes MMU, USB and TCP/IP network support. The following features are
currently not supported or are not stable with Circle:

* Multi-core emulation (-smp)
* GPIO low level peripherals (e.g. Act LED, I2C, SPI, PWM)
* PWM sound
* Kernel options
* Mouse cursor
* HW random number generator

There is a special fork of QEMU by Andrew Baumann which supports the Raspberry
Pi 2 and which should be used for 32-bit operation at the moment. Circle
programs must be build with the system option PHYSICAL_COUNTER undefined (!) in
include/circle/sysconfig.h to run inside this QEMU version in any case. Please
note that there is a problem in the USB CDC Ethernet/RNDIS driver of Andrew
Baumann's fork. This has been patched in a third repository.

* https://git.qemu.org/?p=qemu.git	Official QEMU repository
* https://github.com/0xabu/qemu		Fork of Andrew Baumann for Raspberry Pi 2
* https://github.com/rsta2/qemu		Fork with patches for Circle

Most of my Circle tests have been done with the version from the third
repository on a x86_64 Linux host. Other host systems have not been tested with
Circle by myself so far.

To get and build the QEMU source code for Circle enter the following commands:

	git clone https://github.com/rsta2/qemu.git qemu
	cd qemu
	git submodule update --init dtc

	mkdir build
	cd build
	../configure --target-list=arm-softmmu
	make

When you have build a Circle sample (e.g. sample/17-fractal) for the Raspberry
Pi 2, you can run it in QEMU as follows:

	cd arm-softmmu
	./qemu-system-arm -M raspi2 -bios /path_to_circle/sample/17-fractal/kernel7.img

These options enable specific features of QEMU:

-global bcm2835-fb.xres=1024 -global bcm2835-fb.yres=768 (set screen resolution)
-serial stdio		(write serial output to stdout)
-d guest_errors,unimp	(write unimplemented feature calls to stdout)
-sd filename		(enable SD card access to the disk image filename)
-usbdevice keyboard	(enable USB keyboard support)
-usbdevice mouse	(enable USB mouse support, but mouse cursor not working)
-usbdevice disk:filename (enable USB mass storage device access to disk image)
-semihosting		(enable semihosting support)

With the last option the possibility to automatically exit QEMU, requested by a
Circle program, is enabled. This requires the system option LEAVE_QEMU_ON_HALT to
be defined in include/circle/sysconfig.h. Furthermore with this option a Circle
program can access files in the file system of the host system. This may cause
security issues, so be careful!


USB

If you use the -usbdevice option, you may notice a USB freeze inside a Circle
application after some time. This may hang the whole application. This is caused
by an issue in the BCM2835 USB driver in QEMU. As a workaround you can define
USE_QEMU_USB_FIX in include/circle/sysconfig.h before building Circle. Do not
use this, if you build Circle images, which will run on a real Raspberry Pi.


NETWORKING

Setting up QEMU for networking may be not that easy. The following
configurations have been tested:

With sample/21-webserver:

	qemu-system-arm -M raspi2 -bios kernel7.img -usbdevice net \
			-net user,hostfwd=tcp::8080-:80

Open http://localhost:8080 in your web browser on your host system! Port 8080 on
the host will be forwarded to port 80 on the guest system.

With sample/18-ntptime:

	qemu-system-arm -M raspi2 -bios kernel7.img -usbdevice net \
			-net tap,ifname=tap0,script=no,downscript=no

This command has to be run as root (sudo). QEMU creates an additional networking
device "tap0" which can be used as described in:

	http://opensourceforu.com/2011/05/quick-quide-to-qemu-setup/


DEBUG

Circle applications running in QEMU can be debugged using the GNU debugger (GDB)
with ARM support. You have to add the options -s (enable GDB support) and -S
(wait for GDB connect) to the QEMU command line to do this. Inside GDB use the
following commands:

	file kernel7.elf
	target remote localhost:1234
	cont


LINKS

Have a look at these URLs for further information:

* https://www.qemu.org/documentation/
* https://github.com/0xabu/qemu/wiki/
